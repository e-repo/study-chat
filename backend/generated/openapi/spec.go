// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xX3Y7bRBR+FWvgAqSw8bYpEr4rPxeVACFQr1AvhmQ2mbKecWfGwKqKlGxQKaJiEeIS",
	"BLyBmyas1TTeVzjzRuiMnWwSO94V3UZC3ZvIOZk55zvfOd8X+SFpyzCSggmjSfCQ6HaPhdQ93u50PmFa",
	"0y77nD2ImTYYjJSMmDKcuSPtHhWCHeJjSL/7mImu6ZFg3/cbJORi8f1Gg5ijiJGAaKO46JJ+g3SooXjt",
	"TcUOSEDeaJ7DaBYYmkX1D6mhCwT9foMo9iDminVI8OUSQJHw3rKS/Oo+axusdDs2vbuaqa1NsJBy18KB",
	"VCE1JCgiFagjqvW3UnXWTi+DpQsbYBdplxfq4epICs3KeI38mgn3UFstP1ZV4gPFqGFXxckBV9p8SkNW",
	"AellGTvP3bgce6utbeOPr4OJY14NpJT8I6VkTd4wX9fqyZSSVSx3XcYVed3akFerYiixZurOep9cmHdb",
	"541yYViXqcXhxQBrZNy6aFpF0ZWEjWUL5WHhbS4OpOOLm0P8DX6HDCZ2BDP7xIMExvYYMjuAFE4hsY8g",
	"hdSDCczsiWd/gMQeQ0Ia5BumNJeCBMTf8/f2sSUZMUEjTgJyc8/fu+nWxvQcqc0VViOZ095huq14ZPIs",
	"8Btk8BTLwwymMIcUpp4dQoZh+2MesicenEGGSOEUMhg7OFPERlx9RTEdDoF8JrUp5k1yypg278vOkfNQ",
	"KQwTDgaNokPedvea97UU54Z8kVWWvbq/Ph2jYuYC+fY6Jm74+xXN/73eJ7Y+skM4g6l9DHPIcADr9Mwh",
	"Q85bvn9l/axLzfWyAfMPmHpIOswghQnM7U8YmECCgPIvp5DAmR1AZoeQIMJbO0X4K8ztyB7bAZJkT3Bh",
	"MvsYUngKzyHBhZraAYzdZ9LwHOkDt0UpbpIdogaeowwm8AJSt3RDly/JZWFHToI6DkOqji6/uGgCtKtR",
	"suVpk3uYs6l5V7zDRY1I8OZpQTjWwTWAMWTwDHdkizTcDx6k8CKv50HqLYy9rJkveFfcEa9IMuV/wctL",
	"5soB1KzRn5VMPtlUpRtzMY//hxpb/ns7RLidRvjHqcSOUASoMBjbEUzt8WthGSUZb1PuWw7Vs5WMj9BM",
	"3l51k7+qTqw6ShzVOMov2LvrHPv5HlJsOs9xgaE4C0EvgTNIcMdgZn/eail3o1f1L7zxqrFjQym9Olzb",
	"ybWd7NhO/pOGX8pa+v1/AwAA//+7BerbxBAAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
