// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xX3Y7bRBR+FWvgAqSw8bYpEr4rPxeVACFQr9BeDMlsMmU9486MgVUVKdmgUkTFIsQl",
	"CHgDN01Yq2m8r3DmjdAZO9kktrML3UZC9CZyxjPnfOc75/tGfkDaMoykYMJoEjwgut1jIXWPtzudj5jW",
	"tMs+Zfdjpg0uRkpGTBnO3JZ2jwrBjvAxpN98yETX9Eiw7/sNEnKx+H+jQcxxxEhAtFFcdEm/QTrUUDz2",
	"umKHJCCvNS9gNAsMzSL7+9TQBYJ+v0EUux9zxTok+HwJoAh4sMwkv7jH2gYz3Y5N765mqrYIFlLuSjiU",
	"KqSGBMVKBeqIav21VJ213cvF0oENsIuwywPb4epICs3KeI38kgn3sDVbvq0qxXuKUcOui5NDrrT5mIas",
	"AtKLMnYRu3E19lZLq+OPr4OJY14NpBT8A6XklrhhPq7VnSkFqxjubRFX5HVrQ16tiqbEmqk763VyYd5u",
	"XRTKhWFdphabFw3cIuPWZd0qkq4EbCxLOKin4EqM/hMc9TlxJxeH0vWImyN8B79CBhM7gpl97EECY3sC",
	"mR1ACmeQ2IeQQurBBGb21LPfQWJPICEN8hVTmktBAuLv+Xv7WI6MmKARJwG5uefv3XSjanqukOZKJZHM",
	"W91huq14ZPIo8Atk8ATTwwymMIcUpp4dQobL9vt8yZ56cA4ZIoUzyGDs4EwRG3H5FcVw2HjyidSmIJjk",
	"9DBt3pWdY+fbUhgmHAwaRUe87c4172kpLi6By+y5fD/01zthVMzcQt5fx8QNf//aAGzOj0u/Qeuf6wwi",
	"qSM7hHOY2kcwhwxbu078HDLsZsv3rw3ounFUwfwNph62E2aQwgTm9gdcmECCgPI/Z5DAuR1AZoeQIMJb",
	"O0X4M8ztyJ7YAZJkT3EUM/sIUngCzyDBUZ3aAYzdb9LwHOkDN58pzqgdorqeocAm8BxSN85DFy/JBWdH",
	"Tsg6DkOqjq8uCbQ02tUo/HK3yQHGbGreFW9xsUV+ePKsIBzz4BjAGDJ4ijNSIzr3woMUnuf5PEi9xTVV",
	"VuNnvCvuiJckxvKdvmMxVty8VWP0eyWTjzdV6dpc9OO/ocaW/84OEdbTCH85ldgRigAVBmM7gqk9+V9Y",
	"RknGdcp9w6F6uhLxIZrJm6tu8kfVjlVHiaMtjvIT1u4qx3q+hRSLzmNcYijOQtBL4BwSnDGY2R9rLeVu",
	"9LLu940Ppx0bSulD6JWdvLKTHdvJv9LwC1lLv/93AAAA//+vLzRpkhEAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
